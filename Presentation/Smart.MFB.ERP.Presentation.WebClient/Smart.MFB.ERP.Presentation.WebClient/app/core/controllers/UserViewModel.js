
var userModule = angular.module('user', ['schoolERPCommon'])
    .config(function ($routeProvider, $locationProvider) {

        $routeProvider.when(schoolERP.rootPath + 'core/user', { templateUrl: schoolERP.rootPath + 'app/core/views/userlist.html', controller: 'UserListViewModel' });
        $routeProvider.when(schoolERP.rootPath + 'core/user/useredit/:userId', { templateUrl: schoolERP.rootPath + 'app/core/views/useredit.html', controller: 'UserEditViewModel' });

        $routeProvider.otherwise({ redirectTo: schoolERP.rootPath + 'core/user' });

        $locationProvider.html5Mode({
            enabled: true,
            requireBase: false
        });
    });

userModule.controller("UserViewModel", function ($scope, $window, viewModelHelper) {

    $scope.viewModelHelper = viewModelHelper;

    $scope.previous = function () {
        $window.history.back();
    }
});

userModule.controller("UserListViewModel", function ($scope, $window, $location, viewModelHelper) {

    $scope.previous = function () {
        $window.history.back();
    }

    $scope.title = 'Users';
    $scope.viewMode = 'userlist'; // userlist, success
    $scope.modules = [];

    $scope.init = false; // used so view doesn't sit on "no available users" while load takes place

    $scope.loadUsers = function () {
        viewModelHelper.apiGet('api/user/availableusers', null,
                function (result) {
                    $scope.users = result.data;
                    if ($scope.init === false)
                        initializeView();
                    $scope.init = true;

                });
    }

    var initializeView = function () {

        setTimeout(function () {

            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };

            /* TABLETOOLS */
            var otable = $('#userTable').DataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'l><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "oTableTools": {
                    "aButtons": [
                    "copy",
                    "csv",
                    "xls",
                       {
                           "sExtends": "pdf",
                           "sTitle": "All Modules",
                           "sPdfMessage": "Eglobalicthub ERP PDF Export",
                           "sPdfSize": "letter"
                       },
                       {
                           "sExtends": "print",
                           "sMessage": "Generated by Eglobalicthub <i>(press Esc to close)</i>"
                       }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#userTable'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

            // custom toolbar
            //$("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

            // Apply the filter
            $("#userTable thead th input[type=text]").on('keyup change', function () {

                otable
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();

            });

            /* END TABLETOOLS */

        }, 50);
    }

    $scope.createUser = function () {
        $scope.viewMode = 'useredit';
        $location.path(schoolERP.rootPath + 'core/user/useredit/0');
    }

    $scope.viewUser = function (userId) {
        $scope.viewMode = 'useredit';
        $location.path(schoolERP.rootPath + 'core/user/useredit/' + userId);
    }

    $scope.deleteUser = function (userId) {
        var deleteFlag = $window.confirm('Are you sure you want to delete this item.');

        if (deleteFlag) {
            viewModelHelper.apiPost('api/user/deleteuser', userId,
          function (result) {
              toastr.success('User Deleted Successfully.', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
              //alert('Item deleted successfully.');
              $location.path(schoolERP.rootPath + 'core/user/userlist');
          },
          function (result) {
              toastr.error('Fail to delete item', +result.data, { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
              //alert('Fail to delete item. ' + result.data);
          }, null);
        }
    }

    $scope.userStatus = function (state) {
        if (state === true)
            return 'Active';
        return 'Not Active';
    }

    $scope.getEntity = function (state) {
        if (state === 1)
            return 'Finance';
        if (state === 2)
            return 'Managers';
        if (state === 3)
            return 'Department';
        if (state === 4)
            return 'Account';
        if (state === 5)
            return 'Non-Finance';
        return 'Non-Finance';
    }

    $scope.updateLockStatus = function (state) {
        if (state === true) {
            $scope.LockStatusClass = 'btn btn-success btn-xs glyphicon glyphicon-eye-open';
            user.IsLock = false;
        }
        else if (state === false)
            $scope.LockStatusClass = 'btn btn-danger btn-xs glyphicon glyphicon-eye-close';
        user.IsLock = true;
    }

    $scope.LockStatusClass = 'btn btn-warning btn-xs glyphicon glyphicon-lock';
    $scope.userLockStatus = function (state) {
        if (state === true) {
            $scope.LockStatusClass = 'btn btn-success btn-xs glyphicon glyphicon-eye-open';
            return 'UnLock';
        }
        else {
            $scope.LockStatusClass = 'btn btn-danger btn-xs glyphicon glyphicon-eye-close';
            return 'Locked';
        }

    }

    $scope.loadUsers();
});

userModule.controller("UserEditViewModel", function ($scope, $window, $location, $routeParams, viewModelHelper, validator) {



    viewModelHelper.modelIsValid = true;
    viewModelHelper.modelErrors = [];

    $scope.title = 'Edit User';
    $scope.viewMode = 'useredit'; // userlist, success

    $scope.userModel = { FirstName: '', LastName: '', LoginID: '', Email: '', Mobile: '', EntityScope: '', ScopeCode: '', GroupId: '', EmployeeCode: '', LastLoginDate: new Date(), IsLock: true, Active: true };

    $scope.userRoleModels = [];

    $scope.init = false; // used so view doesn't sit on "no available users" while load takes place

    var userModelRules = [];

    var setupRules = function () {
        userModelRules.push(new validator.PropertyRule("FirstName", {
            required: { message: "Name is required" }
        }));

        userModelRules.push(new validator.PropertyRule("LoginID", {
            required: { message: "LoginID is required" }
        }));

        userModelRules.push(new validator.PropertyRule("Email", {
            required: { message: "Email is required" }
        }));
    }

    $scope.loadUser = function () {
        loadLookUp();
        if ($routeParams.userId !== "0") {
            viewModelHelper.apiGet('api/user/getuser/' + $routeParams.userId, null,
						function (result) {
						    $scope.userModel = result.data;
						    $scope.loadEntityScopes($scope.userModel.EntityScope);
						    if ($scope.init === false)
						        initializeView();
						    $scope.init = true;
						});
        }

    }

    var initializeView = function () {
        setTimeout(function () {


        }, 50);
    }


    $scope.cancel = function () {
        $location.path(schoolERP.rootPath + 'core/user/userlist');
    }

    $scope.save = function () {
        validator.ValidateModel($scope.userModel, userModelRules);
        viewModelHelper.modelIsValid = $scope.userModel.isValid;
        viewModelHelper.modelErrors = $scope.userModel.errors;
        if (viewModelHelper.modelIsValid) {

            viewModelHelper.apiPost('api/user/updateuser', $scope.userModel,
            function (result) {
            alert("User created Successfully.");
                //toastr.success('User Created', 'Success', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
                $location.path(schoolERP.rootPath + 'core/user/userlist');
            });
        }
        else {
            viewModelHelper.modelErrors = $scope.userModel.errors;
            //toastr.warning(viewModelHelper.modelErrors, 'Require Fields', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
        }

        $scope.$parent.viewModelHelper = viewModelHelper;
    }
    var loadLookUp = function () {
	    if ($scope.init !== true) {
	        loadStaffs();
	        loadEntityScopes();
	        loadGroup();

	    }
    }
    var loadStaffs = function () {
        viewModelHelper.apiGet('api/staff/availableStaffs', null,
			function (result) {
			    $scope.staffs = result.data;

			});
    }

	var loadEntityScopes = function () {
	    $scope.entityscopes = [];
	    $scope.entityscopes.push({ Code: 1, Name: 'Finance' });
	    $scope.entityscopes.push({ Code: 2, Name: 'Managers' });
	    $scope.entityscopes.push({ Code: 3, Name: 'Department' });
	    $scope.entityscopes.push({ Code: 4, Name: 'Account' });
	    $scope.entityscopes.push({ Code: 5, Name: 'Non-Finance' });
	}

    //loadEntityScope
	$scope.loadEntityScopes = function (selectedEntity) {
	    $scope.scopes = [];
	    if (selectedEntity == 1)
	        $scope.scopes = [{ Code: 'Finance', Name: 'Finance' }];
	    if (selectedEntity == 2)
	        loadFaculties();
	    if (selectedEntity == 3)
	        loadDepartments();
	    if (selectedEntity == 4)
	        loadPrograms();
	    if (selectedEntity == 5)
	        loadNonAcademic();
	}

    //Faculty
	var loadFaculties = function () {
	    viewModelHelper.apiGet('api/academicdepartmentcategory/availableAcademicDepartmentCategories/', null,
			function (result) {
			    $scope.scopes = result.data;

			});
	}

	var loadDepartments = function () {
	    viewModelHelper.apiGet('api/academicdepartment/availableAcademicDepartments/', null,
			function (result) {
			    $scope.scopes = result.data;

			});
	}

	var loadPrograms = function () {
	    viewModelHelper.apiGet('api/academicstream/availableAcademicStreams/', null,
			function (result) {
			    $scope.scopes = result.data;

			});
	}

	var loadNonAcademic = function () {
	    viewModelHelper.apiGet('api/academicdepartment/availableAcademicDepartments/', null,
			function (result) {
			    $scope.scopes = result.data;

			});
	}

	var loadGroup = function () {
	    viewModelHelper.apiGet('api/group/availablegroups/', null,
			function (result) {
			    $scope.groups = result.data;

			});
	}

    //Get Staff Deatils
	$scope.loadGetStaffDeatils = function (selectedStaff) {
	    viewModelHelper.apiGet('api/staff/getStaffByCode/'+ selectedStaff, null,
			function (result) {
			    $scope.staff = result.data;
			    $scope.userModel.FirstName = $scope.staff.FirstName;
			    $scope.userModel.LastName = $scope.staff.LastName;
			    $scope.userModel.Email = $scope.staff.Email;
			    $scope.userModel.Mobile =  $scope.staff.Mobile;
			});

	}


    setupRules();
    $scope.loadUser();

});
