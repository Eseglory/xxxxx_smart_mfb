
var userGroupModule = angular.module('userGroup', ['schoolERPCommon'])
    .config(function ($routeProvider, $locationProvider) {
   
        $routeProvider.when(schoolERP.rootPath + 'core/usergroup', { templateUrl: schoolERP.rootPath + 'app/core/views/usergrouplist.html', controller: 'UserGroupListViewModel' });
		//$routeProvider.when(schoolERP.rootPath + 'core/usergroup/usergroupedit/:userGroupId', { templateUrl: schoolERP.rootPath + 'app/core/views/usergroupedit.html', controller: 'UserGroupEditViewModel' });
		
        $routeProvider.otherwise({ redirectTo: schoolERP.rootPath + 'core/usergroup' });

		$locationProvider.html5Mode({
		  enabled: true,
		  requireBase: false
		});
    });

userGroupModule.controller("UserGroupViewModel", function ($scope, $window, viewModelHelper) {

    $scope.viewModelHelper = viewModelHelper;

    $scope.previous = function () {
        $window.history.back();
    }
});

userGroupModule.controller("UserGroupListViewModel", function ($scope,$window, $location, viewModelHelper) {

    $scope.previous = function () {
        $window.history.back();
    }

	$scope.title = 'User Groups';
	$scope.viewMode = 'usergroupedit';
    $scope.modules = [];
   
    $scope.init = false; // used so view doesn't sit on "no available userGroups" while load takes place

    $scope.loadUserGroups = function () {
        viewModelHelper.apiGet('api/userGroup/availableusergroups', null,
                function (result) {
                    $scope.userGroups = result.data;
					if ($scope.init === false)
						initializeView();
                    $scope.init = true;
                });
    }

	var initializeView = function(){

	setTimeout(function () {
                
				var responsiveHelper_datatable_tabletools = undefined;

	var breakpointDefinition = {
            tablet: 1024,
            phone: 480
        };

	/* TABLETOOLS */
        var otable = $('#userGroupTable').DataTable({

            // Tabletools options:
            //   https://datatables.net/extensions/tabletools/button_options
            "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'l><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
            "oTableTools": {
                "aButtons": [
                "copy",
                "csv",
                "xls",
                   {
                       "sExtends": "pdf",
                       "sTitle": "All Modules",
                       "sPdfMessage": "Eglobalicthub ERP PDF Export",
                       "sPdfSize": "letter"
                   },
                   {
                       "sExtends": "print",
                       "sMessage": "Generated by Eglobalicthub <i>(press Esc to close)</i>"
                   }
                ],
                "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
            },
            "autoWidth": true,
            "preDrawCallback": function () {
                // Initialize the responsive datatables helper once.
                if (!responsiveHelper_datatable_tabletools) {
                    responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#userGroupTable'), breakpointDefinition);
                }
            },
            "rowCallback": function (nRow) {
                responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
            },
            "drawCallback": function (oSettings) {
                responsiveHelper_datatable_tabletools.respond();
            }
        });

		// custom toolbar
        //$("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

        // Apply the filter
        $("#userGroupTable thead th input[type=text]").on('keyup change', function () {

            otable
                .column($(this).parent().index() + ':visible')
                .search(this.value)
                .draw();

        });

        /* END TABLETOOLS */

            }, 50);
	}

	$scope.createUserGroup = function(){
	 $scope.viewMode = 'userGroupedit';
		$location.path(schoolERP.rootPath + 'core/usergroup/usergroupedit/0');
	}

	$scope.viewUserGroup = function(userGroupId){
	 $scope.viewMode = 'userGroupedit';
	 $location.path(schoolERP.rootPath + 'core/usergroup/usergroupedit/' + userGroupId);
	}

	$scope.deleteUserGroup = function(userGroupId){
	    var deleteFlag = $window.confirm('Are you sure you want to delete this item.');

	    if (deleteFlag) {
	        viewModelHelper.apiPost('api/usergroup/deleteusergroup', userGroupId,
          function (result) {
              alert('Item deleted successfully.');
              $location.path(schoolERP.rootPath + 'core/usergroup/usergrouplist');
          },
          function (result) {
              alert('Fail to delete item. ' + result.data);
          }, null);
	    }
	}

	$scope.userGroupStatus = function(state){
		if (state === true)
		return 'Active';
		return 'Not Active';
	}

	viewModelHelper.modelIsValid = true;
	viewModelHelper.modelErrors = [];

	
	//$scope.viewMode = 'usergroupedit';

	$scope.userGroupModel = { UserId: '', GroupId: '', Active: true };

	$scope.userGroupRoleModels = [];

	$scope.init = false; // used so view doesn't sit on "no available userGroups" while load takes place

	var userGroupModelRules = [];

	var setupRules = function () {
	    userGroupModelRules.push(new validator.PropertyRule("UserId", {
	        required: { message: "User is required" }
	    }));

	    userGroupModelRules.push(new validator.PropertyRule("GroupId", {
	        required: { message: "Group is required" }
	    }));

	}

	$scope.loadUserGroup = function () {

	    loadLookUp();

	    if ($routeParams.userGroupId !== "0") {
	        viewModelHelper.apiGet('api/userGroup/getuserGroup/' + $routeParams.userGroupId, null,
						function (result) {
						    $scope.userGroupModel = result.data;
						    if ($scope.init === false)
						        initializeView();
						    $scope.init = true;
						});
	    }
	}

	var initializeView = function () {
	    setTimeout(function () {


	    }, 50);
	}

	$scope.cancel = function () {
	    $location.path(schoolERP.rootPath + 'core/usergroup/usergrouplist');
	}

	$scope.save = function () {

	    validator.ValidateModel($scope.userGroupModel, userGroupModelRules);
	    viewModelHelper.modelIsValid = $scope.userGroupModel.isValid;
	    viewModelHelper.modelErrors = $scope.userGroupModel.errors;
	    if (viewModelHelper.modelIsValid) {

	        viewModelHelper.apiPost('api/usergroup/updateusergroup', $scope.userGroupModel,
            function (result) {
                $location.path(schoolERP.rootPath + 'core/usergroup/usergrouplist');
            });
	    }
	    else
        {
            viewModelHelper.modelErrors = $scope.academicClassModel.errors;
        }
            
        $scope.$parent.viewModelHelper = viewModelHelper;
	}

	var loadLookUp = function () {
	    if ($scope.init !== true) {

            loadUsers();
            loadGroups();
	    }
	}

	var loadUsers = function () {
	    viewModelHelper.apiGet('api/user/availableusers/', null,
			function (result) {
			    $scope.users = result.data;

			});
	}
    
	var loadGroups = function () {
	    viewModelHelper.apiGet('api/group/availablegroups/', null,
			function (result) {
			    $scope.groups = result.data;

			});
	}
  
    $scope.loadUserGroups();
});

userGroupModule.controller("UserGroupListViewModel", function ($scope,$window, $location,$routeParams, viewModelHelper,validator) {

    viewModelHelper.modelIsValid = true;
    viewModelHelper.modelErrors = [];

	$scope.title = 'User Group Map';
    $scope.viewMode = 'usergroupedit'; 

    $scope.userGroupModel = { UserId: '', GroupId: '', Active: true };

    $scope.userGroupRoleModels = [];

    $scope.init = false; // used so view doesn't sit on "no available userGroups" while load takes place

    var userGroupModelRules = [];

    var setupRules = function () {
        userGroupModelRules.push(new validator.PropertyRule("UserId", {
            required: { message: "User is required" }
        }));

        userGroupModelRules.push(new validator.PropertyRule("GroupId", {
            required: { message: "Group is required" }
        }));

    }

    $scope.loadUserGroups = function () {

        loadLookUp();

        if ($routeParams.userGroupId !== "0") {
            viewModelHelper.apiGet('api/userGroup/availableusergroups/', null,
						function (result) {
						    $scope.usergroupmodel = result.data;
						    if ($scope.init === false)
						        initializeView();
						    $scope.init = true;
						});
        }
    }

    var initializeView = function () {
        setTimeout(function () {

            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };

            /* TABLETOOLS */
            var otable = $('#userGroupTable').DataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'l><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "oTableTools": {
                    "aButtons": [
                    "copy",
                    "csv",
                    "xls",
                       {
                           "sExtends": "pdf",
                           "sTitle": "All Modules",
                           "sPdfMessage": "Eglobalicthub ERP PDF Export",
                           "sPdfSize": "letter"
                       },
                       {
                           "sExtends": "print",
                           "sMessage": "Generated by Eglobalicthub <i>(press Esc to close)</i>"
                       }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#userGroupTable'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

            // custom toolbar
            //$("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

            // Apply the filter
            $("#groupTable thead th input[type=text]").on('keyup change', function () {

                otable
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();

            });

            /* END TABLETOOLS */

        }, 50);
    }

    $scope.cancel = function () {
        $location.path(schoolERP.rootPath + 'core/usergroup/usergrouplist');
    }

    $scope.save = function () {

        validator.ValidateModel($scope.userGroupModel, userGroupModelRules);
        viewModelHelper.modelIsValid = $scope.userGroupModel.isValid;
        viewModelHelper.modelErrors = $scope.userGroupModel.errors;
        if (viewModelHelper.modelIsValid) {

            viewModelHelper.apiPost('api/usergroup/updateusergroup', $scope.userGroupModel,
            function (result) {
                $location.path(schoolERP.rootPath + 'core/usergroup/usergrouplist');
            });
        }
        else
            viewModelHelper.modelErrors = $scope.userGroupModel.errors;
    }

    $scope.deleteUserGroup = function (userGroupId) {
        var deleteFlag = $window.confirm('Are you sure you want to delete this item.');

        if (deleteFlag) {
            viewModelHelper.apiPost('api/usergroup/deleteusergroup', userGroupId,
          function (result) {
              alert('Item deleted successfully.');
              $location.path(schoolERP.rootPath + 'core/usergroup/usergrouplist');
          },
          function (result) {
              alert('Fail to delete item. ' + result.data);
          }, null);
        }
    }

    var loadLookUp = function () {
        if ($scope.init !== true) {

            loadUsers();
            loadGroups();
        }
    }

    var loadUsers = function () {
        viewModelHelper.apiGet('api/user/availableusers/', null,
			function (result) {
			    $scope.users = result.data;

			});
    }

    var loadGroups = function () {
        viewModelHelper.apiGet('api/group/availablegroups/', null,
			function (result) {
			    $scope.groups = result.data;

			});
    }

    $scope.loadUserGroups();

});
