
var roleModule = angular.module('role', ['schoolERPCommon'])
    .config(function ($routeProvider, $locationProvider) {
   
        $routeProvider.when(schoolERP.rootPath + 'core/role', { templateUrl: schoolERP.rootPath + 'app/core/views/rolelist.html', controller: 'RoleListViewModel' });
		$routeProvider.when(schoolERP.rootPath + 'core/role/roleedit/:roleId', { templateUrl: schoolERP.rootPath + 'app/core/views/roleedit.html', controller: 'RoleEditViewModel' });
		$routeProvider.when(schoolERP.rootPath + 'core/role/rolemenuedit/:roleId/:roleMenuId', { templateUrl: schoolERP.rootPath + 'app/core/views/rolemenuedit.html', controller: 'RoleMenuEditViewModel' });
        
        $routeProvider.otherwise({ redirectTo: schoolERP.rootPath + 'core/role' });

		$locationProvider.html5Mode({
		  enabled: true,
		  requireBase: false
		});
    });

roleModule.controller("RoleViewModel", function ($scope, $window, viewModelHelper) {

    $scope.viewModelHelper = viewModelHelper;

    $scope.previous = function () {
        $window.history.back();
    }
});

roleModule.controller("RoleListViewModel", function ($scope,$window, $location, viewModelHelper) {

    $scope.previous = function () {
        $window.history.back();
    }

	$scope.title = 'Roles';
    $scope.viewMode = 'rolelist'; // rolelist, success
    $scope.modules = [];
   
    $scope.init = false; // used so view doesn't sit on "no available roles" while load takes place

    $scope.loadRoles = function () {
        viewModelHelper.apiGet('api/role/availableroles', null,
                function (result) {
                    $scope.roles = result.data;
					if ($scope.init === false)
						initializeView();
                    $scope.init = true;
                });
    }

	var initializeView = function(){

	setTimeout(function () {
                
				var responsiveHelper_datatable_tabletools = undefined;

	var breakpointDefinition = {
            tablet: 1024,
            phone: 480
        };

	/* TABLETOOLS */
        var otable = $('#roleTable').DataTable({

            // Tabletools options:
            //   https://datatables.net/extensions/tabletools/button_options
            "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'l><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
            "oTableTools": {
                "aButtons": [
                "copy",
                "csv",
                "xls",
                   {
                       "sExtends": "pdf",
                       "sTitle": "All Modules",
                       "sPdfMessage": "Eglobalicthub ERP PDF Export",
                       "sPdfSize": "letter"
                   },
                   {
                       "sExtends": "print",
                       "sMessage": "Generated by Eglobalicthub <i>(press Esc to close)</i>"
                   }
                ],
                "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
            },
            "autoWidth": true,
            "preDrawCallback": function () {
                // Initialize the responsive datatables helper once.
                if (!responsiveHelper_datatable_tabletools) {
                    responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#roleTable'), breakpointDefinition);
                }
            },
            "rowCallback": function (nRow) {
                responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
            },
            "drawCallback": function (oSettings) {
                responsiveHelper_datatable_tabletools.respond();
            }
        });

		// custom toolbar
        //$("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

        // Apply the filter
        $("#roleTable thead th input[type=text]").on('keyup change', function () {

            otable
                .column($(this).parent().index() + ':visible')
                .search(this.value)
                .draw();

        });

        /* END TABLETOOLS */

            }, 50);
	}

	$scope.createRole = function(){
	 $scope.viewMode = 'roleedit';
		$location.path(schoolERP.rootPath + 'core/role/roleedit/0');
	}

	$scope.viewRole = function(roleId){
	 $scope.viewMode = 'roleedit';
		$location.path(schoolERP.rootPath + 'core/role/roleedit/' + roleId);
	}

	$scope.deleteRole = function(roleId){
	    var deleteFlag = $window.confirm('Are you sure you want to delete this item.');

	    if (deleteFlag) {
	        viewModelHelper.apiPost('api/role/deleterole', roleId,
          function (result) {
              toastr.success('User Deleted Successfully.', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
              $location.path(schoolERP.rootPath + 'core/role/rolelist');
          },
          function (result) {
              toastr.error('Fail to delete item', +result.data, { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
          }, null);
	    }
	}

	$scope.roleStatus = function(state){
		if (state === true)
		return 'Active';
		return 'Not Active';
	}
  
    $scope.loadRoles();
});

roleModule.controller("RoleEditViewModel", function ($scope,$window, $location,$routeParams, viewModelHelper,validator) {

    viewModelHelper.modelIsValid = true;
    viewModelHelper.modelErrors = [];

	$scope.title = 'Edit Role';
    $scope.viewMode = 'roleedit'; // rolelist, success
    $scope.roleModel = {Name:'',ModuleId:'',Description:'',Active:true};
	 $scope.roleMenuModels = [];
   
    $scope.init = false; // used so view doesn't sit on "no available roles" while load takes place

	 var roleModelRules = [];

    var setupRules = function () {
        roleModelRules.push(new validator.PropertyRule("Name", {
            required: { message: "Name is required" }
        }));

        roleModelRules.push(new validator.PropertyRule("ModuleId", {
            required: { message: "Module is required" }
        }));
       
    }

	$scope.loadRole = function(){

        loadLookUp();

	    if ($routeParams.roleId !== "0") {
            
	        viewModelHelper.apiGet('api/role/getrolemenu/' + $routeParams.roleId, null,
						function (result) {
							$scope.roleModel = result.data.Role;
							$scope.roleMenuModels = result.data.RoleMenus;
							if ($scope.init === false)
								initializeView();
							$scope.init = true;
						});
			}
	}

	var initializeView = function(){
		setTimeout(function () {
                
				var responsiveHelper_datatable_tabletools = undefined;

	var breakpointDefinition = {
            tablet: 1024,
            phone: 480
        };

	/* TABLETOOLS */
        var otable = $('#roleMenuTable').DataTable({

            // Tabletools options:
            //   https://datatables.net/extensions/tabletools/button_options
            "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'l><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                    "t" +
                    "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
            "oTableTools": {
                "aButtons": [
                "copy",
                "csv",
                "xls",
                   {
                       "sExtends": "pdf",
                       "sTitle": "All Modules",
                       "sPdfMessage": "Eglobalicthub ERP PDF Export",
                       "sPdfSize": "letter"
                   },
                   {
                       "sExtends": "print",
                       "sMessage": "Generated by Eglobalicthub <i>(press Esc to close)</i>"
                   }
                ],
                "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
            },
            "autoWidth": true,
            "preDrawCallback": function () {
                // Initialize the responsive datatables helper once.
                if (!responsiveHelper_datatable_tabletools) {
                    responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#roleMenuTable'), breakpointDefinition);
                }
            },
            "rowCallback": function (nRow) {
                responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
            },
            "drawCallback": function (oSettings) {
                responsiveHelper_datatable_tabletools.respond();
            }
        });

		// custom toolbar
        //$("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

        // Apply the filter
        $("#roleTable thead th input[type=text]").on('keyup change', function () {

            otable
                .column($(this).parent().index() + ':visible')
                .search(this.value)
                .draw();

        });

        /* END TABLETOOLS */

            }, 50);
	}
	

	$scope.cancel = function(){
		$location.path(schoolERP.rootPath + 'core/role/rolelist');
	}

	$scope.save = function(){
		validator.ValidateModel($scope.roleModel, roleModelRules);
        viewModelHelper.modelIsValid = $scope.roleModel.isValid;
        viewModelHelper.modelErrors = $scope.roleModel.errors;
        if (viewModelHelper.modelIsValid) {

			viewModelHelper.apiPost('api/role/updaterole', $scope.roleModel,
            function (result) {
                toastr.success('Record Saved', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
                $location.path(schoolERP.rootPath + 'core/role/rolelist');
            }); 
        }
        else {

            toastr.warning(viewModelHelper.modelErrors, 'Require Fields', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
        }

	    $scope.$parent.viewModelHelper = viewModelHelper;
	}

	$scope.createRoleMenu = function(){
	 $scope.viewMode = 'rolemenuedit';
	 $location.path(schoolERP.rootPath + 'core/role/rolemenuedit/' + $routeParams.roleId + '/0');
	}

	$scope.viewRoleMenu = function(roleMenuId){
	    $scope.viewMode = 'rolemenuedit';
	 $location.path(schoolERP.rootPath + 'core/role/rolemenuedit/' + $routeParams.roleId + '/' + roleMenuId);
	}

	$scope.deleteRoleMenu = function(roleMenuId){
	    var deleteFlag = $window.confirm('Are you sure you want to delete this item.');

	    if (deleteFlag) {
	        viewModelHelper.apiPost('api/role/deleterolemenu', roleMenuId,
          function (result) {
              toastr.success('User Deleted Successfully.', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
              $location.path(schoolERP.rootPath + 'core/role/roleedit/' + $routeParams.roleId);
          },
          function (result) {
              alert('Fail to delete item. ' + result.data);
          }, null);
	    }
	}

	$scope.roleMenuStatus = function(state){
		if (state === true)
		return 'Active';
		return 'Not Active';
	}

	var loadLookUp = function () {
	    if ($scope.init !== true) {
	        loadModules();
	       
	    }
	}

	var loadModules = function () {
	    viewModelHelper.apiGet('api/module/availablemodules', null,
			function (result) {
			    $scope.modules = result.data;

			});
	}


	setupRules();
	$scope.loadRole();

});

roleModule.controller("RoleMenuEditViewModel", function ($scope,$window, $location,$routeParams, viewModelHelper,validator) {

  

    viewModelHelper.modelIsValid = true;
    viewModelHelper.modelErrors = [];

	$scope.title = 'Edit Role Menu';
    $scope.viewMode = 'rolemenuedit'; // roleedit, success
    $scope.roleMenuModel = {RoleId:0,MenuId:0,Active:true};
   
    $scope.init = false; // used so view doesn't sit on "no available roles" while load takes place

	 var roleMenuModelRules = [];

    var setupRules = function () {
        roleMenuModelRules.push(new validator.PropertyRule("RoleId", {
            notZero: { message: "Role is required" }
        }));

		 roleMenuModelRules.push(new validator.PropertyRule("MenuId", {
		     notZero: { message: "Menu is required" }
        }));
       
    }

	var initializeView = function(){

	    //Lookups
	  loadLookUp();

	if ($routeParams.roleMenuId !== "0") {
	    viewModelHelper.apiGet('api/role/getrolemenu/' + $routeParams.roleMenuId, null,
					function (result) {
						$scope.roleMenuModel = result.data;
					
						$scope.init = true;
					});
		}
	}
	

	$scope.cancel = function () {
	    $location.path(schoolERP.rootPath + 'core/role/roleedit/' + $routeParams.roleId);
	}

	$scope.save = function () {

	    $scope.roleMenuModel.RoleId = $routeParams.roleId;

		validator.ValidateModel($scope.roleMenuModel, roleMenuModelRules);
        viewModelHelper.modelIsValid = $scope.roleMenuModel.isValid;
        viewModelHelper.modelErrors = $scope.roleMenuModel.errors;
        if (viewModelHelper.modelIsValid) {

			viewModelHelper.apiPost('api/menu/updatemenurole', $scope.roleMenuModel,
            function (result) {
                $location.path(schoolERP.rootPath + 'core/role/roleedit/' + $routeParams.roleId);
            });
        }
        else
        {
            viewModelHelper.modelErrors = $scope.roleMenuModel.errors;
            toastr.error(viewModelHelper.modelErrors, 'Require Fields', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
        }
            
        $scope.$parent.viewModelHelper = viewModelHelper;
	}

	var loadLookUp = function () {
	    if ($scope.init !== true) {
	        loadModules();

	    }
	}

	var loadModules = function () {
	    viewModelHelper.apiGet('api/module/availablemodules', null,
			function (result) {
			    $scope.modules = result.data;

			});
	}

    var loadMenus = function (selectedModule) {
        viewModelHelper.apiGet('api/menu/getmenubymodule/' + selectedModule, null,
			function (result) {
			    $scope.menus = result.data;

			});
	}


	$scope.getMenus = function (selectedModule) {
	    viewModelHelper.apiGet('api/menu/getmenubymodule/' + selectedModule, null,
                function (result) {
                    $scope.menus = result.data;
                    
                });
	}

	setupRules();
	initializeView();

});


