
var groupModule = angular.module('group', ['schoolERPCommon'])
    .config(function ($routeProvider, $locationProvider) {

        $routeProvider.when(schoolERP.rootPath + 'core/group', { templateUrl: schoolERP.rootPath + 'app/core/views/grouplist.html', controller: 'GroupListViewModel' });
        $routeProvider.when(schoolERP.rootPath + 'core/group/groupedit/:groupId', { templateUrl: schoolERP.rootPath + 'app/core/views/groupedit.html', controller: 'GroupEditViewModel' });
        $routeProvider.when(schoolERP.rootPath + 'core/group/grouproleedit/:groupId/:groupRoleId', { templateUrl: schoolERP.rootPath + 'app/core/views/grouproleedit.html', controller: 'GroupRoleEditViewModel' });

        $routeProvider.otherwise({ redirectTo: schoolERP.rootPath + 'core/group' });

        $locationProvider.html5Mode({
            enabled: true,
            requireBase: false
        });
    });

groupModule.controller("GroupViewModel", function ($scope, $window, viewModelHelper) {

    $scope.viewModelHelper = viewModelHelper;

    $scope.previous = function () {
        $window.history.back();
    }
});

groupModule.controller("GroupListViewModel", function ($scope, $window, $location, viewModelHelper) {

    $scope.previous = function () {
        $window.history.back();
    }

    $scope.title = 'Groups';
    $scope.viewMode = 'grouplist'; // grouplist, success
    $scope.modules = [];

    $scope.init = false; // used so view doesn't sit on "no available groups" while load takes place

    $scope.loadGroups = function () {
        viewModelHelper.apiGet('api/group/availablegroups', null,
                function (result) {
                    $scope.groups = result.data;
                    if ($scope.init === false)
                        initializeView();
                    $scope.init = true;
                });
    }

    var initializeView = function () {

        setTimeout(function () {

            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };

            /* TABLETOOLS */
            var otable = $('#groupTable').DataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'l><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "oTableTools": {
                    "aButtons": [
                    "copy",
                    "csv",
                    "xls",
                       {
                           "sExtends": "pdf",
                           "sTitle": "All Modules",
                           "sPdfMessage": "Eglobalicthub ERP PDF Export",
                           "sPdfSize": "letter"
                       },
                       {
                           "sExtends": "print",
                           "sMessage": "Generated by Eglobalicthub <i>(press Esc to close)</i>"
                       }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#groupTable'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

            // custom toolbar
            //$("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

            // Apply the filter
            $("#groupTable thead th input[type=text]").on('keyup change', function () {

                otable
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();

            });

            /* END TABLETOOLS */

        }, 50);
    }

    $scope.createGroup = function () {
        $scope.viewMode = 'groupedit';
        $location.path(schoolERP.rootPath + 'core/group/groupedit/0');
    }

    $scope.viewGroup = function (groupId) {
        $scope.viewMode = 'groupedit';
        $location.path(schoolERP.rootPath + 'core/group/groupedit/' + groupId);
    }

    $scope.deleteGroup = function (groupId) {
        var deleteFlag = $window.confirm('Are you sure you want to delete this item.');

        if (deleteFlag) {
            viewModelHelper.apiPost('api/group/deletegroup', groupId,
          function (result) {
              toastr.success('Item Deleted Successfully.', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
              $location.path(schoolERP.rootPath + 'core/group/grouplist');
          },
          function (result) {
              toastr.error('Fail to delete item, ' + result.data, { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
          }, null);
        }
    }

    $scope.getFile = function (input) {

        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var csv = e.target.result;
                $scope.csvfile = csv;

            }

            //Renders Image on Page
            reader.readAsText(input.files[0]);
        }
    }



    $scope.importcsv = function () {

        var jcsv = CSV2JSON($scope.csvfile);
        $scope.csvgroups = jcsv;

        viewModelHelper.apiPost('api/group/updategroupcsv', $scope.csvgroups,
            function (result) {
                $location.path(schoolERP.rootPath + 'core/group/grouplist');
            });
    }


    $scope.cancel = function () {
        $location.path(schoolERP.rootPath + 'core/group/grouplist');
    }

    $scope.groupStatus = function (state) {
        if (state === true)
            return 'Active';
        return 'Not Active';
    }

    $scope.loadGroups();
});

groupModule.controller("GroupEditViewModel", function ($scope, $window, $location, $routeParams, viewModelHelper, validator) {



    viewModelHelper.modelIsValid = true;
    viewModelHelper.modelErrors = [];

    $scope.title = 'Edit Group';
    $scope.viewMode = 'groupedit'; // grouplist, success
    $scope.groupModel = { Name: '', Description: '', Active: true };
    $scope.groupRoleModels = [];

    $scope.init = false; // used so view doesn't sit on "no available groups" while load takes place

    var groupModelRules = [];

    var setupRules = function () {
        groupModelRules.push(new validator.PropertyRule("Name", {
            required: { message: "Name is required" }
        }));

    }

    $scope.loadGroup = function () {
        if ($routeParams.groupId !== "0") {
            viewModelHelper.apiGet('api/group/getgroup/' + $routeParams.groupId, null,
						function (result) {
						    $scope.groupModel = result.data.Group;
						    $scope.groupRoleModels = result.data.GroupRoles;
						    if ($scope.init === false)
						        initializeView();
						    $scope.init = true;
						});
        }
    }

    var initializeView = function () {
        setTimeout(function () {

            var responsiveHelper_datatable_tabletools = undefined;

            var breakpointDefinition = {
                tablet: 1024,
                phone: 480
            };

            /* TABLETOOLS */
            var otable = $('#groupRoleTable').DataTable({

                // Tabletools options:
                //   https://datatables.net/extensions/tabletools/button_options
                "sDom": "<'dt-toolbar'<'col-xs-12 col-sm-6'l><'col-sm-6 col-xs-6 hidden-xs'T>r>" +
                        "t" +
                        "<'dt-toolbar-footer'<'col-sm-6 col-xs-12 hidden-xs'i><'col-sm-6 col-xs-12'p>>",
                "oTableTools": {
                    "aButtons": [
                    "copy",
                    "csv",
                    "xls",
                       {
                           "sExtends": "pdf",
                           "sTitle": "All Modules",
                           "sPdfMessage": "Eglobalicthub ERP PDF Export",
                           "sPdfSize": "letter"
                       },
                       {
                           "sExtends": "print",
                           "sMessage": "Generated by Eglobalicthub <i>(press Esc to close)</i>"
                       }
                    ],
                    "sSwfPath": "/Scripts/plugin/datatables/swf/copy_csv_xls_pdf.swf"
                },
                "autoWidth": true,
                "preDrawCallback": function () {
                    // Initialize the responsive datatables helper once.
                    if (!responsiveHelper_datatable_tabletools) {
                        responsiveHelper_datatable_tabletools = new ResponsiveDatatablesHelper($('#groupRoleTable'), breakpointDefinition);
                    }
                },
                "rowCallback": function (nRow) {
                    responsiveHelper_datatable_tabletools.createExpandIcon(nRow);
                },
                "drawCallback": function (oSettings) {
                    responsiveHelper_datatable_tabletools.respond();
                }
            });

            // custom toolbar
            //$("div.toolbar").html('<div class="text-right"><img src="/Content/img/logo.png" alt="SmartAdmin" style="width: 111px; margin-top: 3px; margin-right: 10px;"></div>');

            // Apply the filter
            $("#groupTable thead th input[type=text]").on('keyup change', function () {

                otable
                    .column($(this).parent().index() + ':visible')
                    .search(this.value)
                    .draw();

            });

            /* END TABLETOOLS */

        }, 50);
    }


    $scope.cancel = function () {
        $location.path(schoolERP.rootPath + 'core/group/grouplist');
    }

    $scope.save = function () {
        validator.ValidateModel($scope.groupModel, groupModelRules);
        viewModelHelper.modelIsValid = $scope.groupModel.isValid;
        viewModelHelper.modelErrors = $scope.groupModel.errors;
        if (viewModelHelper.modelIsValid) {

            viewModelHelper.apiPost('api/group/updategroup', $scope.groupModel,
            function (result) {
                $location.path(schoolERP.rootPath + 'core/group/grouplist');
            });
        }
        else {

            toastr.warning(viewModelHelper.modelErrors, 'Require Fields', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
        }

        $scope.$parent.viewModelHelper = viewModelHelper;
    }

    $scope.createGroupRole = function () {
        $scope.viewMode = 'grouproleedit';
        $location.path(schoolERP.rootPath + 'core/group/grouproleedit/' + $routeParams.groupId + '/0');
    }

    $scope.viewGroupRole = function (groupRoleId) {
        $scope.viewMode = 'grouproleedit';
        $location.path(schoolERP.rootPath + 'core/group/grouproleedit/' + $routeParams.groupId + '/' + groupRoleId);
    }

    $scope.deleteGroupRole = function (groupRoleId) {
        var deleteFlag = $window.confirm('Are you sure you want to delete this item.');

        if (deleteFlag) {
            viewModelHelper.apiPost('api/group/deletegrouprole', groupRoleId,
          function (result) {
              toastr.success('Group Role Deleted Successfully.', { closeButton: true, positionClass: 'toast-top-center', preventOPenDuplicates: true });
              //alert('Item deleted successfully.');
              $location.path(schoolERP.rootPath + 'core/group/groupedit/' + $routeParams.groupId);
          },
          function (result) {
              alert('Fail to delete item. ' + result.data);
          }, null);
        }
    }

    $scope.groupRoleStatus = function (state) {
        if (state === true)
            return 'Active';
        return 'Not Active';
    }

    setupRules();
    $scope.loadGroup();

});

groupModule.controller("GroupRoleEditViewModel", function ($scope, $window, $location, $routeParams, viewModelHelper, validator) {



    viewModelHelper.modelIsValid = true;
    viewModelHelper.modelErrors = [];

    $scope.title = 'Edit Group Role';
    $scope.viewMode = 'grouproleedit'; // groupedit, success
    $scope.groupRoleModel = { GroupId: 0, RoleId: 0, Active: true };

    $scope.init = false; // used so view doesn't sit on "no available groups" while load takes place

    var groupRoleModelRules = [];

    var setupRules = function () {
        groupRoleModelRules.push(new validator.PropertyRule("GroupId", {
            notZero: { message: "Group is required" }
        }));

        groupRoleModelRules.push(new validator.PropertyRule("RoleId", {
            notZero: { message: "Role is required" }
        }));

    }

    var initializeView = function () {

        //Lookups
        loadLookUp();

        if ($routeParams.groupRoleId !== "0") {
            viewModelHelper.apiGet('api/group/getgrouprole/' + $routeParams.groupRoleId, null,
                        function (result) {
                            $scope.groupRoleModel = result.data;

                            $scope.init = true;
                        });
        }
    }


    $scope.cancel = function () {
        $location.path(schoolERP.rootPath + 'core/group/groupedit/' + $routeParams.groupId);
    }

    $scope.save = function () {

        $scope.groupRoleModel.GroupId = $routeParams.groupId;

        validator.ValidateModel($scope.groupRoleModel, groupRoleModelRules);
        viewModelHelper.modelIsValid = $scope.groupRoleModel.isValid;
        viewModelHelper.modelErrors = $scope.groupRoleModel.errors;
        if (viewModelHelper.modelIsValid) {

            viewModelHelper.apiPost('api/group/updategrouprole', $scope.groupRoleModel,
            function (result) {
                $location.path(schoolERP.rootPath + 'core/group/groupedit/' + $routeParams.groupId);
            });
        }
        else
            viewModelHelper.modelErrors = $scope.groupRoleModel.errors;
    }

    var loadLookUp = function () {
        if ($scope.init !== true) {
            loadRoles();

        }
    }


    var loadRoles = function () {
        viewModelHelper.apiGet('api/role/availableroles', null,
						function (result) {
						    $scope.roles = result.data;
						});
    }

    setupRules();
    initializeView();

});


